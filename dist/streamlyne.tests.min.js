var noAuthConn=Streamlyne.connect({host:"http://127.0.0.1:5000/"}),authConn=Streamlyne.connect({host:"http://127.0.0.1:5000/",email:"testing@streamlyne.co",token:"sl-dev"});test("Testing QUnit",function(){ok(!0,"Passed!")});var node={id:null};module("Steamlyne - Asset",{}),asyncTest("Read All",function(){expect(1),Streamlyne.asset.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.asset.create(authConn,{data:{description:"This is an Asset.",number_asset:"A"+(new Date).getTime(),number_serial:""+3*(new Date).getTime()}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume! Node Id: "+node.id)),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.asset.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a&&a.message):ok(!0,"Passed and ready to resume! Node Id: "+node.id),start()})}),asyncTest("Update with Id",function(){expect(1),Streamlyne.asset.updateWithId(authConn,node.id,{data:{description:"This is an Asset.",number_asset:"A"+(new Date).getTime(),number_serial:""+3*(new Date).getTime()}},function(a,b){a?ok(!1,a.message):ok(!0,"Passed and ready to resume! Node Id: "+node.id),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.asset.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume! Node Id: "+node.id),start()})}),module("Steamlyne - Attribute",{}),asyncTest("Read All",function(){expect(1),Streamlyne.attribute.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.attribute.create(authConn,{data:{name:"Pressure",description:"This is the Asset's pressure attribute.",data_type:"kPa"}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.attribute.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a&&a.message):ok(!0,"Passed and ready to resume! Node Id: "+node.id),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.attribute.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - Group",{}),asyncTest("Read All",function(){expect(1),Streamlyne.group.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.group.create(authConn,{data:{name:"Unit Testers",description:"This is a group for unit testing."}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.attribute.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a&&a.message):ok(!0,"Passed and ready to resume! Node Id: "+node.id),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.attribute.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - Log",{}),asyncTest("Read All",function(){expect(1),Streamlyne.log.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.log.create(authConn,{data:{name:"Unit Test Log Sheet",description:"This is an example log sheet."}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.log.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.log.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - Organization",{}),asyncTest("Read All",function(){expect(1),Streamlyne.organization.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.organization.create(authConn,{data:{name:"Unit Test Organization "+(new Date).getTime()}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.organization.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.organization.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - Site",{}),asyncTest("Read All",function(){expect(1),Streamlyne.site.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.site.create(authConn,{data:{name:"Unit Test Site",location:"Unit Test Location"}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.site.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.site.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - Users",{}),asyncTest("Read All",function(){expect(1),Streamlyne.user.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})});var newUserEmail="user-"+(new Date).getTime()+"@streamlyne.co",newUserPassword="password";asyncTest("Create",function(){expect(1),Streamlyne.user.create(authConn,{data:{name_first:"Glavin",name_last:"Wiechert",email:newUserEmail,password:newUserPassword,job_title:"Unit Tester"}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Incorrect Login",function(){expect(1);Streamlyne.connect({host:"http://127.0.0.1:5000/"}).authenticate(newUserEmail,newUserPassword+"incorrect",function(a,b){a&&a.message?ok(!0,"Passed and ready to resume! Error message: "+a.message):ok(!1,"Server Error: Missing appropriate error message response."),start()})}),asyncTest("Login - Requires User Read All to pass",function(){expect(1);Streamlyne.connect({host:"http://127.0.0.1:5000/"}).authenticate(newUserEmail,newUserPassword,function(a,b){Streamlyne.user.readAll(b,function(a,c){!a&&b.getUserId()?ok(!0,"Passed and ready to resume! Authenticated user: "+b.getUserId()):ok(!1,a.message),start()})})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.user.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume! Deleted Node Id: "+node.id),start()})}),module("Steamlyne - Work Orders",{}),asyncTest("Read All",function(){expect(1),Streamlyne.workOrder.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.workOrder.create(authConn,{data:{description:"This is a test Work Order at "+new Date+"."}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.workOrder.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.workOrder.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - IsolationCollection",{}),asyncTest("Read All",function(){expect(1),Streamlyne.isolationCollection.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.isolationCollection.create(authConn,{data:{description:"This is a test Work Order at "+new Date+"."}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.isolationCollection.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.isolationCollection.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - Isolation Point",{}),asyncTest("Read All",function(){expect(1),Streamlyne.isolationPoint.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.isolationPoint.create(authConn,{data:{name:"This is a test Isolation Point at "+new Date+".",tag_blind:(new Date).getTime(),tag_loto:(new Date).getTime(),position_normal:"closed",position_normal:"open",flange_size:14,flange_pressure:10,scaffolding_required:1}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.isolationPoint.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.isolationPoint.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - Isolation Job",{}),asyncTest("Read All",function(){expect(1),Streamlyne.isolationJob.readAll(authConn,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Create",function(){expect(1),Streamlyne.isolationJob.create(authConn,{data:{description:"This is a test Work Order at "+new Date+"."}},function(a,b){a?ok(!1,a.message):(node.id=b.id,ok(!0,"Passed and ready to resume!")),start()})}),asyncTest("Read with Id",function(){expect(1),Streamlyne.isolationJob.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),asyncTest("Delete with Id",function(){expect(1),Streamlyne.isolationJob.deleteWithId(authConn,node.id,function(a){a?ok(!1,a.message):ok(!0,"Passed and ready to resume!"),start()})}),module("Steamlyne - Relationships",{}),asyncTest("Add Relationship",function(){expect(6),Streamlyne.log.create(authConn,{data:{name:"Unit Test Log Sheet",description:"This is an example log sheet."}},function(a,b){a?(ok(!1,a.message),start()):(node.id=b.id,ok(!0,"Passed. Created Log "+node.id+"."),Streamlyne.attribute.create(authConn,{data:{name:"Pressure",description:"This is the Asset's pressure attribute.",data_type:"kPa"}},function(a,b){if(!a){var c={};c.id=b.id;var d="relationship";ok(!0,"Passed. Created Attribute "+c.id+"."),Streamlyne.log.addRelationshipBetweenIds(authConn,node.id,c.id,d,function(a){a?(ok(!1,a.message),start()):(ok(!0,"Passed. Added relationship."),Streamlyne.log.readWithId(authConn,node.id,function(a,b){a||b.id!==node.id?(ok(!1,a.message),start()):(ok(!0,"Passed and ready to resume!"),Streamlyne.log.deleteWithId(authConn,node.id,function(a){a?(ok(!1,a.message),start()):(ok(!0,"Passed cleanup. Deleted log "+node.id+"."),Streamlyne.attribute.deleteWithId(authConn,c.id,function(a){a?ok(!1,a.message):ok(!0,"Passed cleanup. Deleted attribute "+c.id+"."),start()}))}))}))})}}))})});